{"version":3,"sources":["hoc/Layout/Layout.js","components/Card/Card.js","containers/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Layout","react_default","a","createElement","this","props","children","Component","Card","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeTitle","event","setState","inputValueTitle","target","value","onChangeBody","inputValueBody","state","className","style","display","alignItems","width","placeholder","type","name","onChange","cols","rows","onClick","onAdd","Board","cards","components_Card_Card","createCard","console","log","cardCreated","push","_this2","Fragment","map","card","key","App","hoc_Layout_Layout","containers_Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAceA,mLAVb,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,YACEC,KAAKC,MAAMC,kBALIC,aCwCNC,cApCd,SAAAA,EAAYH,GAAO,IAAAI,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAI,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAV,KAAMC,KAOVU,cAAgB,SAAAC,GAAK,OAClBP,EAAKQ,SAAS,CAChBC,gBAAiBF,EAAMG,OAAOC,SAVZX,EAanBY,aAAe,SAAAL,GAAK,OACjBP,EAAKQ,SAAS,CAChBK,eAAgBN,EAAMG,OAAOC,SAb7BX,EAAKc,MAAQ,CACZL,gBAAiB,GACjBI,eAAgB,IAJCb,wEAoBlB,OACCR,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,kEAAkEC,MAAS,CACzFC,QAAS,OACTC,WAAY,WAEX1B,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,yDAAyDC,MAAO,CAACG,MAAO,QACtF3B,EAAAC,EAAAC,cAAA,SAAO0B,YAAY,aAAaL,UAAU,YAAYM,KAAK,OAAOC,KAAK,aAAaC,SAAU5B,KAAKW,gBACnGd,EAAAC,EAAAC,cAAA,YAAU0B,YAAY,mBAAmBL,UAAU,YAAYM,KAAK,OAAOE,SAAU5B,KAAKiB,aAAcY,KAAM,GAAIC,KAAM,KAEzHjC,EAAAC,EAAAC,cAAA,UAAQgC,QAAS/B,KAAKC,MAAM+B,MAAOZ,UAAU,6BAA7C,aA/BcjB,aCsBJ8B,6MArBdd,MAAQ,CACPe,MAAO,CAACrC,EAAAC,EAAAC,cAACoC,EAAD,UAGTC,WAAa,SAAAxB,GACZyB,QAAQC,IAAI,OACZ,IAAIC,EAAclC,EAAKc,MAAMe,MAC7B7B,EAAKQ,SAAS,CAAC0B,YAAaA,EAAYC,KAAK3C,EAAAC,EAAAC,cAACoC,EAAD,kFAIrC,IAAAM,EAAAzC,KACR,OACCH,EAAAC,EAAAC,cAACF,EAAAC,EAAM4C,SAAP,KACE1C,KAAKmB,MAAMe,MAAMS,IAAI,SAAAC,GAAI,OAAI/C,EAAAC,EAAAC,cAACoC,EAAD,CAAMH,MAAOS,EAAKL,WAAYS,IAAKD,cAhBjDzC,aCiBL2C,mLAdX,OACEjD,EAAAC,EAAAC,cAACgD,EAAD,KACElD,EAAAC,EAAAC,cAAA,OAAKqB,UAAa,aAChBvB,EAAAC,EAAAC,cAAA,MAAIqB,UAAU,qCAAd,qBACAvB,EAAAC,EAAAC,cAAA,OAAKqB,UAAY,6BAEfvB,EAAAC,EAAAC,cAACiD,EAAD,gBARM7C,aCQE8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d983e6d3.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Layout extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<main>\r\n\t\t\t\t\t{this.props.children}\r\n\t\t\t\t</main>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Layout","import React, {Component} from 'react'\r\nimport ReactDOM from \"react-dom\";\r\n\r\n\r\nclass Card extends Component {\r\n\r\n\tconstructor(props) {\r\n\t    super(props)\r\n\t\tthis.state = {\r\n\t\t\tinputValueTitle: \"\", \r\n\t\t\tinputValueBody: \"\"\r\n\t\t}\r\n\t}\r\n\r\n\tonChangeTitle = event =>\r\n    this.setState({\r\n\t\tinputValueTitle: event.target.value\r\n\t});\r\n\t\r\n\tonChangeBody = event =>\r\n    this.setState({\r\n\t\tinputValueBody: event.target.value\r\n    });\r\n\r\n\trender() {\r\n \r\n\t\treturn (\r\n\t\t\t<div className=\"col-3 bg-light border border-secondary ml-1 mt-3 shadow rounded\" style = {{\r\n\t\t\t\tdisplay: 'flex',\r\n\t\t\t\talignItems: 'center'\r\n\t\t\t}}>\r\n\t\t\t\t\t<div className=\"d-flex flex-column text-center align-items-center pb-3\" style={{width: '75%'}}>\r\n\t\t\t\t\t\t<input placeholder=\"Task title\" className=\"w-75 mt-2\" type=\"text\" name=\"inputValue\" onChange={this.onChangeTitle}/>\r\n\t\t\t\t\t\t<textarea placeholder=\"Task description\" className=\"w-75 mt-2\" type=\"text\" onChange={this.onChangeBody} cols={21} rows={5} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button onClick={this.props.onAdd} className=\"btn btn-success btn-small\">+</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t\r\n\t}\r\n\t\r\n}\r\nexport default Card\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react'\r\nimport Card from '../../components/Card/Card'\r\n\r\nclass Board extends Component {\r\n\r\n\tstate = {\r\n\t\tcards: [<Card/>]\r\n\t}\r\n\r\n\tcreateCard = event => {\r\n\t\tconsole.log('yes')\r\n\t\tlet cardCreated = this.state.cards\r\n\t\tthis.setState({cardCreated: cardCreated.push(<Card/>)});\r\n\t}\r\n\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t{this.state.cards.map(card => <Card onAdd={this.createCard} key={card}/>) } \r\n\t\t\t</React.Fragment>\r\n\t\t\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Board","import React, { Component } from 'react'\nimport Layout from './hoc/Layout/Layout'\nimport Board from './containers/Board/Board'\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout>\n        <div className = {'container'}>\n          <h1 className=\"text-center bg-primary text-white\">Trello-like board</h1>\n          <div className = \"row justify-content-start\">\n         \n            <Board />\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}